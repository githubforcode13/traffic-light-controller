module traffic_light(clk,rst,light_M1,light_M2,light_ST,light_MT,count,ps);
input clk,rst;
output reg[2:0] light_M1,light_M2,light_ST,light_MT;
output reg[3:0] count;
output reg[2:0]ps;
parameter s1=0,s2=1,s3=2,s4=3,s5=4,s6=5;
parameter tmg=7,ty=2,ttg=5,tsg=3;
always@(posedge clk or posedge rst)
begin
if(rst==1)
begin
count <= 0;
ps <= s1;
end
else
case({ps})
s1:if(count < tmg) begin
ps <= s1;
count <= count+1;
end
else
begin
ps <= s2;
count <= 0;
end
s2:if(count < ty) begin
ps <= s2;
count <= count+1;
end
else
begin
ps <= s3;
count <= 0;
end
s3:if(count < ttg) begin
ps <= s3;
count <= count+1;
end
else
begin
ps <= s4;
count <= 0;
end
s4:if(count < ty) begin
ps <= s4;
count <= count+1;
end
else
begin
ps <= s5;
count <= 0;
end
s5:if(count < tsg) begin
ps <= s5;
count <= count+1;
end
else
begin
ps <= s6;
count <= 0;
end
s6:if(count < ty) begin
ps <= s6;
count <= count+1;
end
else
begin
ps <= s1;
count <= 0;
end
default : ps <= s1;
endcase
end
always@(ps)
begin
case({ps})
s1:begin
light_M1 <= 3'b001;
light_M2 <= 3'b001;
light_MT <= 3'b100;
light_ST <= 3'b100;
end
s2:begin
light_M1 <= 3'b010;
light_M2 <= 3'b010;
light_MT <= 3'b100;
light_ST <= 3'b100;
end
s3:begin
light_M1 <= 3'b100;
light_M2 <= 3'b100;
light_MT <= 3'b001;
light_ST <= 3'b100;
end
s4:begin
light_M1 <= 3'b100;
light_M2 <= 3'b100;
light_MT <= 3'b010;
light_ST <= 3'b100;
end
s5:begin
light_M1 <= 3'b100;
light_M2 <= 3'b100;
light_MT <= 3'b100;
light_ST <= 3'b001;
end
s6:begin
light_M1 <= 3'b100;
light_M2 <= 3'b100;
light_MT <= 3'b100;
light_ST <= 3'b010;
end
default:begin
light_M1 <= 3'b000;
light_M2 <= 3'b000;
light_MT <= 3'b000;
light_ST <= 3'b000;
end
endcase
end
endmodule
